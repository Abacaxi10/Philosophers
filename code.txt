/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   errors.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rabatist <rabatist@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/08 18:16:07 by rabatist          #+#    #+#             */
/*   Updated: 2025/02/28 13:34:54 by rabatist         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

int	check_arg(int ac, char **av, t_data *data)
{
	if (ac != 5 && ac != 6)
	{
		printf("Error : Wrong Number of arguments\n");
		return (0);
	}
	if (!init_arg(ac, av, data))
	{
		printf("Error : Only positiv numbers allowed\n");
		return (0);
	}
	return (1);
}

int	init_arg(int ac, char **av, t_data *data)
{
	int	i;

	i = 1;
	while (ac > 1)
	{
		if (!ft_isdigit(av[i]))
			return (0);
		i++;
		ac--;
	}
	data->n_philo = ft_atoi(av[1]);
	data->t_to_die = ft_atoi(av[2]);
	data->t_to_eat = ft_atoi(av[3]);
	data->t_to_sleep = ft_atoi(av[4]);
	if (av[5])
		data->n_philo_eat = ft_atoi(av[5]);
	else
		data->n_philo_eat = -1;
	data->dead = 0;
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rabatist <rabatist@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/10 18:14:05 by rabatist          #+#    #+#             */
/*   Updated: 2025/02/28 13:38:20 by rabatist         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

void	free_mutex(int i, t_data *data)
{
	while (i >= 0)
	{
		pthread_mutex_destroy(&(data->fork[i]));
		i--;
	}
}

int	init_philo(t_data *data)
{
	int	i;

	i = 0;
	while (i < data->n_philo)
	{
		data->philo[i].id = i;
		data->philo[i].left_fork = i;
		if (i == data->n_philo - 1)
			data->philo[i].right_fork = 0;
		else
			data->philo[i].right_fork = (i + 1);
		data->philo[i].death_timer = 0;
		data->philo[i].count_meal = 0;
		data->philo[i].data = data;
		i++;
	}
	return (1);
}

int init_mutex(t_data *data)
{
	int i = 0;

	if (!malloc_struct(data))
		return (0);
	while (i < data->n_philo)
	{
		if (pthread_mutex_init(&(data->fork[i]), NULL))
		{
			free_mutex(i - 1, data);
			free (data->fork);
			free (data->philo);
			return (0);
		}
		i++;
	}
	if (pthread_mutex_init(&(data->message), NULL) || pthread_mutex_init(&(data->eating), NULL))
	{
		free_mutex(data->n_philo -1, data);
		free (data->fork);
		free (data->philo);
		return (0);
	}
	return (1);
}

int	malloc_struct(t_data *data)
{
	data->fork = malloc(sizeof(pthread_mutex_t) * data->n_philo);
	if (!data->fork)
	{
		printf("Error: malloc failed for forks\n");
		return (0);
	}
	data->philo = malloc(sizeof(t_philo) * data->n_philo);
	if (!data->philo)
	{
		printf("Error: malloc failed for philo");
		free (data->fork);
		return (0);
	}
	return (1);
}

long long	get_time(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return ((tv.tv_sec * 1000) + (tv.tv_usec / 1000));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rabatist <rabatist@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/08 17:57:58 by rabatist          #+#    #+#             */
/*   Updated: 2025/02/28 13:34:33 by rabatist         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

int	main(int ac, char **av)
{
	t_data	data;
	int	i;

	i = 0;
	if (!check_arg(ac, av, &data))
		return (0);
	if (!init_mutex(&data))
		return (0);
	if (!init_philo(&data))
		return (0);
	if (!start_threads(&data))
		return (0);
	while (i < data.n_philo)
	{
		pthread_mutex_destroy(&data.fork[i]);
		i++;
	}
	pthread_mutex_destroy(&data.message);
	pthread_mutex_destroy(&data.eating);
	free (data.fork);
	free (data.philo);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   start_threads.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rabatist <rabatist@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/27 19:21:38 by rabatist          #+#    #+#             */
/*   Updated: 2025/02/28 13:42:01 by rabatist         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

void	*philosopher_routine(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	while (!philo->data->dead)
	{
		printf("%lld Philosopher %d thinks\n", get_time() - philo->data->start_time, philo->id);
		pthread_mutex_lock(&philo->data->fork[philo->left_fork]);
		printf("%lld Philosopher %d took the left fork\n", get_time() - philo->data->start_time, philo->id);
		pthread_mutex_lock(&philo->data->fork[philo->right_fork]);
		printf("%lld Philosopher %d took the right fork\n", get_time() - philo->data->start_time, philo->id);
		pthread_mutex_lock(&philo->data->eating);
		philo->death_timer = get_time();
		philo->count_meal++;
		pthread_mutex_unlock(&philo->data->eating);
		printf("%lld Philosopher %d is eating\n", get_time() - philo->data->start_time, philo->id);
		usleep(philo->data->t_to_eat * 1000);
		pthread_mutex_unlock(&philo->data->fork[philo->right_fork]);
		pthread_mutex_unlock(&philo->data->fork[philo->left_fork]);
		printf("%lld Philosopher %d sleeps\n", get_time() - philo->data->start_time, philo->id);
		usleep(philo->data->t_to_sleep * 1000);
	}
	return (NULL);
}

int	start_threads(t_data *data)
{
	int			i;
	pthread_t	monitor;

	i = -1;
	data->start_time = get_time();
	while (++i < data->n_philo)
		data->philo[i].death_timer = data->start_time;
	if (pthread_create(&monitor, NULL, check_death, data))
	{
		printf("Error: impossivle to create monitor thread\n");
		return (0);
	}
	i = -1;
	while (++i < data->n_philo)
	{
		if (pthread_create(&data->philo[i].thread, NULL, philosopher_routine,
				&data->philo[i]))
		{
			printf("Error: impossible to create philo thread %d\n", i);
			return (0);
		}
	}
	i = -1;
	while (++i < data->n_philo)
		pthread_join(data->philo[i].thread, NULL);
	pthread_join(monitor, NULL);
	return (1);
}

void	*check_death(void *arg)
{
	t_data *data;
	int	i;

	data = (t_data *)arg;
	while (1)
	{
		i = 0;
		while (i < data->n_philo)
		{
			pthread_mutex_lock(&data->eating);
			if (get_time() - data->philo[i].death_timer > data->t_to_die)
			{
				pthread_mutex_unlock(&data->eating);
				printf("%lld Philosopher %d died\n", get_time() - data->start_time, data->philo[i].id);
				data->dead = 1;
				return (NULL);
			}
			pthread_mutex_unlock(&data->eating);
			i++;
		}
		usleep(1000);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rabatist <rabatist@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/08 18:27:10 by rabatist          #+#    #+#             */
/*   Updated: 2025/02/27 19:22:09 by rabatist         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

int	ft_atoi(char *str)
{
	int	i;
	int	total;
	int	sign;

	sign = 1;
	total = 0;
	i = 0;
	while (str[i] == ' ' || str[i] == '\t' || str[i] == '\n')
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign = -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		total = total * 10 + str[i] - '0';
		i++;
	}
	return (sign * total);
}

int	ft_isdigit(char *str)
{
	int	i;

	i = 0;
	while (str[i] == '+')
		i++;
	while (str[i])
	{
		if (str[i] >= '0' && str[i] <= '9')
			i++;
		else
			return (0);
	}
	return (1);
}
